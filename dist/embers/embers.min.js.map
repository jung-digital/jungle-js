{"version":3,"sources":["Embers.min.js","/source/Embers.js","/source/src/lib/util/util.js","/source/src/lib/gx/Spark.js","/source/src/lib/Lib.js","/source/src/lib/core/ComponentBase.js","/source/src/embers/Embers.js"],"names":["_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","_get","_x","_x2","_x3","_again","object","property","receiver","desc","parent","getter","undefined","Function","getOwnPropertyDescriptor","get","call","getPrototypeOf","_createClass","defineProperties","target","props","i","length","descriptor","defineProperty","key","protoProps","staticProps","global","factory","exports","module","define","amd","Embers","this","_ran","min","max","Math","random","ranItem","arr","floor","isAbove","p1","p2","y","isBelow","isLeft","x","isRight","reverseOf","dir","toward","push","vecFor","side","Sides","LEFT","paper","Point","RIGHT","TOP","BOTTOM","getRandomPointFor","bounds","right","bottom","hsvToRgb","h","s","v","f","p","q","t","r","g","b","Spark","options","id","pathRedraw","sparkLength","sparkResolution","paths","sparking","a","onFrameCallback","velocity","position","points","pos","shift","elapsed","context","updateTail","start","end","Lib","DEFAULT_WIDTH","DEFAULT_HEIGHT","ComponentBase","canvas","ctx","getContext","lastTime","canvasTargetWidth","width","canvasTargetHeight","height","window","addEventListener","resizeHandler","bind","onMouseMoveHandler","onMouseOutHandler","onTouchStartHandler","onTouchMoveHandler","setAttribute","requestAnimationFrame","onFrameFirst","event","innerWidth","style","resize","console","log","timestamp","onFrame","ran","util","SPARK_COUNT","SPARK_MAX_SIZE","SPARK_MIN_SIZE","SPARK_MAX_VELOCITY","SPARK_MIN_VELOCITY","SPARK_SOURCE_RADIUS","CHANGE_DIR_TIME_MAX","_ComponentBase","sparkCount","maxSparkSize","minSparkSize","maxSparkVelocity","minSparkVelocity","sparkSource","vec2","fromValues","sparks","spark","ratio","rgb","color","l","strokeStyle","lineWidth","size","beginPath","moveTo","lineTo","stroke","_this","clearRect","forEach","startSpark","sparkOnFrame","velAngle","PI","sourceAngle","sourceDistance","life","type","add","cos","sin","scale","heatCurrent","lastAngleChangeTime","glow","flickerSpeed","lifeTotal","demo","angle","matrix","mat2","rotate","transformMat2","nextPos","scaleAndAdd","next","reset","rect","getBoundingClientRect","WIDTH","clientX","left","clientY","top","preventDefault","state","touches"],"mappings":"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","file":"Embers.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Embers = factory()\n}(this, function () { 'use strict';\n\n  /*============================================\n   * A spark represents a sequence of shapes that\n   * move along a provided path.\n   *============================================*/\n\n  class Spark {\n\n    reset() {\n      this.sparking = false;\n    }\n\n    spark(options) {\n      if (this.sparking) {\n        return;\n      }\n\n      // Merge with current options\n      for (var a in options) {\n        this.options[a] = options[a];\n      }\n\n      // TODO do not duplicate variable names, reference via 'this.options.blah'\n      this.onFrameCallback = options.onFrameCallback;\n      this.velocity = options.velocity;\n\n      this.sparking = true;\n      this.position = this.options.position;\n\n      this.points = this.options.position ? [this.options.position] : undefined; // Reset points for manual mode\n    }\n\n    // Manual mode, set the next position of the spark\n    next(pos) {\n      this.position = pos;\n\n      this.points = this.points || [];\n      this.points.push(pos);\n\n      if (this.points.length > this.sparkResolution) {\n        this.points.shift();\n      }\n    }\n\n    onFrame(elapsed, context) {\n      if (this.sparking) {\n        if (this.onFrameCallback) {\n          this.onFrameCallback.call(this, elapsed, context);\n        }\n\n        this.updateTail(elapsed, context);\n      }\n    }\n\n    updateTail(elapsed, context) {\n      // Go backwards from the end, building up paths and letting the dev manually style them\n      // ensuring that there are this.resolution # of paths.\n      if (this.points.length > 1) {\n        for (var i = 0; i < this.points.length - 1; i++) {\n          var start = this.points[this.points.length - (i + 1)];\n          var end = this.points[this.points.length - (i + 2)];\n\n          // Let dev manually style points based on ratio of start to end\n          this.pathRedraw(this, start, end, i / (this.sparkResolution - 1), elapsed, context);\n        }\n      }\n    }\n\n    // Spark()\n    constructor(options) {\n      this.id = options.id || -1; // index of this spark\n      this.pathRedraw = options.pathRedraw; // A function to call to redraw each segment as the spark moves.\n\n      this.sparkLength = options.sparkLength || 200; // Pixel length of the spark\n      this.sparkResolution = options.sparkResolution || 20; // Resolution (number of segments) of the spark\n\n      this.options = options;\n\n      this.paths = []; // Paper.js Paths of this spark, one for each segment.\n\n      this.sparking = false;\n    }\n  }\n\n  class Lib {\n    constructor() {\n      this.Spark = Spark;\n    }\n  }\n\n  var Lib_js = new Lib();\n\n  const DEFAULT_WIDTH = 800;\n  const DEFAULT_HEIGHT = 800 / 1.618;\n\n  class ComponentBase {\n    constructor(canvas, options, id) {\n      this.canvas = canvas;\n      this.ctx = canvas.getContext('2d');\n\n      this.options = options || {};\n\n      this.lastTime = 0;\n\n      this.canvasTargetWidth = this.width = this.options.width || DEFAULT_WIDTH;\n      this.canvasTargetHeight = this.height = this.options.width || DEFAULT_HEIGHT;\n\n      window.addEventListener('resize', this.resizeHandler.bind(this));\n\n      canvas.addEventListener('mousemove', this.onMouseMoveHandler.bind(this));\n      canvas.addEventListener('mouseout', this.onMouseOutHandler.bind(this));\n      canvas.addEventListener('touchstart', this.onTouchStartHandler.bind(this));\n      canvas.addEventListener('touchmove', this.onTouchMoveHandler.bind(this));\n\n      canvas.setAttribute('width', DEFAULT_WIDTH);\n      canvas.setAttribute('height', DEFAULT_HEIGHT);\n\n      if (id) {\n        canvas.setAttribute('id', id);\n      }\n\n      window.requestAnimationFrame(this.onFrameFirst.bind(this));\n    }\n\n    resizeHandler(event) {\n      var i = Math.min(800, window.innerWidth);\n\n      canvas.style.width = this.canvasTargetWidth = i;\n      canvas.style.height = this.canvasTargetHeight = i / 1.618;\n\n      this.resize();\n    }\n\n    resize() {\n      console.log('Resized!', this.canvasTargetWidth, this.canvasTargetHeight);\n    }\n\n    onMouseMoveHandler() {\n      // noop\n    }\n\n    onMouseOutHandler() {\n      // noop\n    }\n\n    onTouchStartHandler() {\n      // noop\n    }\n\n    onTouchMoveHandler() {\n      // noop\n    }\n\n    onFrameFirst(timestamp) {\n      this.lastTime = timestamp;\n      window.requestAnimationFrame(this.onFrame.bind(this));\n    }\n\n    onFrameHandler(timestamp) {\n      if (!this.lastTime) {\n        this.lastTime = timestamp;\n        this.elapsed = 0.01;\n      } else {\n        this.elapsed = (timestamp - this.lastTime) / 1000;\n      }\n    }\n  }\n\n  function ran(min, max) {\n    return Math.random() * (max - min) + min;\n  };\n\n  function ranItem(arr) {\n    return arr[Math.floor(ran(0, arr.length - 0.000001))];\n  };\n\n  const Sides = {\n    LEFT: 1,\n    TOP: 2,\n    RIGHT: 3,\n    BOTTOM: 4,\n    ran: function() {\n      return Math.floor(ran(1, 4.99));\n    }\n  };\n\n  function isAbove(p1, p2) {\n    return p1.y < p2.y;\n  }\n  function isBelow(p1, p2) {\n    return p1.y > p2.y;\n  }\n  function isLeft(p1, p2) {\n    return p1.x < p2.x;\n  }\n  function isRight(p1, p2) {\n    return p1.x > p2.x;\n  }\n  function reverseOf(dir) {\n    return (((dir - 1) + 2) % 4) + 1;\n  } // Opposite of LEFT (1) is RIGHT (3) etc.\n  function toward(p1, p2) {\n    var dir = [];\n    if (isAbove(p1, p2)) dir.push(4);\n    if (isBelow(p1, p2)) dir.push(2);\n    if (isLeft(p1, p2)) dir.push(3);\n    if (isRight(p1, p2)) dir.push(1);\n    return dir;\n  }\n\n  function vecFor(side) {\n    if (side == Sides.LEFT) return new paper.Point(-1, 0);\n    if (side == Sides.RIGHT) return new paper.Point(1, 0);\n    if (side == Sides.TOP) return new paper.Point(0, -1);\n    if (side == Sides.BOTTOM) return new paper.Point(0, 1);\n  }\n\n  function getRandomPointFor(side, bounds) {\n    let x = 0;\n    x = side == Sides.RIGHT ? bounds.right : x;\n    x = side == Sides.TOP || side == Sides.BOTTOM ? ran(0, bounds.right) : x;\n\n    let y = 0;\n    y = side == Sides.BOTTOM ? bounds.bottom : y;\n    y = side == Sides.LEFT || side == Sides.RIGHT ? ran(0, bounds.bottom) : y;\n\n    return new paper.Point(x, y);\n  }\n\n  function hsvToRgb(h, s, v) {\n    var i;\n    var f;\n    var p;\n    var q;\n    var t;\n    var r;\n    var g;\n    var b;\n    if (s == 0) {\n      // achromatic (grey)\n      r = g = b = v;\n    } else {\n      h /= 60; // sector 0 to 5\n      i = Math.floor(h);\n      f = h - i; // factorial part of h\n      p = v * (1 - s);\n      q = v * (1 - s * f);\n      t = v * (1 - s * (1 - f));\n      switch (i) {\n        case 0:\n          r = v;\n          g = t;\n          b = p;\n          break;\n        case 1:\n          r = q;\n          g = v;\n          b = p;\n          break;\n        case 2:\n          r = p;\n          g = v;\n          b = t;\n          break;\n        case 3:\n          r = p;\n          g = q;\n          b = v;\n          break;\n        case 4:\n          r = t;\n          g = p;\n          b = v;\n          break;\n        default:\n          r = v;\n          g = p;\n          b = q;\n          break;\n      }\n    }\n\n    return {\n      r: r,\n      g: g,\n      b: b\n    };\n  }\n\n  var util = {\n    ran: ran,\n    ranItem: ranItem,\n    Sides: Sides,\n    isAbove: isAbove,\n    isBelow: isBelow,\n    isLeft: isLeft,\n    isRight: isRight,\n    reverseOf: reverseOf,\n    toward: toward,\n    vecFor: vecFor,\n    hsvToRgb: hsvToRgb,\n    getRandomPointFor: getRandomPointFor\n  };\n\n  /*============================================\n   * Constants\n   *============================================*/\n  const SPARK_COUNT = 500;              // Maximum number of sparks to display simultaneously\n  const SPARK_MAX_SIZE = 1.5;\n  const SPARK_MIN_SIZE = 0.5;\n  const SPARK_MAX_VELOCITY = 70;\n  const SPARK_MIN_VELOCITY = 20;\n  const SPARK_SOURCE_RADIUS = 50;       // Spark source radius in pixels\n  const CHANGE_DIR_TIME_MAX = 5000;     // The maximum time to wait between changing directions\n\n  /*============================================\n   * The demo JSX component\n   *============================================*/\n  class Embers extends ComponentBase {\n    constructor(canvas, options) {\n      super(canvas, options);\n\n      this.options.sparkCount = this.options.sparkCount || SPARK_COUNT;\n      this.options.maxSparkSize = this.options.maxSparkSize || SPARK_MAX_SIZE;\n      this.options.minSparkSize = this.options.minSparkSize || SPARK_MIN_SIZE;\n      this.options.maxSparkVelocity = this.options.maxSparkVelocity || SPARK_MAX_VELOCITY;\n      this.options.minSparkVelocity = this.options.minSparkVelocity || SPARK_MIN_VELOCITY;\n      this.options.sparkCount = this.options.sparkCount || SPARK_COUNT;\n\n      this.sparkSource = new vec2.fromValues(this.width / 2, this.height / 5);\n\n      this.sparks = [];\n\n      for (var i = 0; i < this.options.sparkCount; i++) {\n        this.sparks.push(new Spark({\n          pathRedraw: this.pathRedraw,\n          sparkResolution: 4\n        }));\n      }\n    }\n\n    pathRedraw(spark, start, end, ratio, elapsed, context) {\n      ratio = 1 - ratio;\n\n      var rgb = util.hsvToRgb(spark.options.color.h, spark.options.color.s, spark.options.color.l);\n\n      context.strokeStyle = 'rgba(' + ~~(rgb.r * 256) + ',' + ~~(rgb.g * 256) + ',' + ~~(rgb.b) * 256 + ',' + ratio + ')';\n      context.lineWidth = spark.options.size * ratio;\n\n      context.beginPath();\n      context.moveTo(start[0], start[1]);\n      context.lineTo(end[0], end[1]);\n      context.stroke();\n    }\n\n    onFrame(timestamp) {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.elapsed = (timestamp - this.lastTime) / 1000;\n      this.lastTime = timestamp;\n\n      this.sparks.forEach(spark => {\n        if (!spark.sparking) {\n          this.startSpark(spark);\n        }\n\n        this.sparkOnFrame.call(spark, this);\n\n        spark.onFrame(this.elapsed, this.ctx);\n      });\n\n      window.requestAnimationFrame(this.onFrame.bind(this));\n    }\n\n    startSpark(spark) {\n      var velAngle = Math.random() - .5 - (Math.PI / 2);\n      var sourceAngle = Math.random() * Math.PI * 2;\n      var sourceDistance = Math.random() * SPARK_SOURCE_RADIUS;\n      var life = Math.random() * 8;\n\n      spark.spark({\n        type: 2,\n        size: (Math.random() * (this.options.maxSparkSize - this.options.minSparkSize)) + this.options.minSparkSize,\n        color: {\n          h: Math.random() * 28 + 20,\n          s: Math.random() * 0.4 + 0.6,\n          l: 1\n        },\n        position: vec2.add(vec2.create(), this.sparkSource, vec2.fromValues(Math.cos(sourceAngle) * sourceDistance, Math.sin(sourceAngle) * sourceDistance)),\n        velocity: vec2.scale(vec2.create(), vec2.fromValues(Math.cos(velAngle), Math.sin(velAngle)), Math.random() * (this.options.maxSparkVelocity - this.options.minSparkVelocity) + this.options.minSparkVelocity),\n        heatCurrent: 0,\n        lastAngleChangeTime: 0,\n        glow: Math.random() * 0.6 + 0.2,\n        flickerSpeed: Math.random(),\n        life: life,\n        lifeTotal: 8\n      });\n    }\n\n    // 'this' will be the Spark object itself.\n    sparkOnFrame(demo) {\n      var ran = (Math.random() * CHANGE_DIR_TIME_MAX) + (demo.lastTime - this.options.lastAngleChangeTime);\n\n      if (ran > CHANGE_DIR_TIME_MAX) {\n        var angle = (Math.random() * (3.141 / 3)) - (3.141 / 6);\n        var matrix = mat2.create();\n        mat2.rotate(matrix, matrix, angle);\n        vec2.transformMat2(this.options.velocity, this.options.velocity, matrix);\n        this.options.lastAngleChangeTime = demo.lastTime;\n      }\n\n      this.options.heatCurrent += (Math.random());\n      this.options.life -= demo.elapsed;\n      this.options.color.l = (this.options.life / this.options.lifeTotal) * this.options.glow;\n\n      var nextPos = vec2.scaleAndAdd(vec2.create(), this.position, this.options.velocity, demo.elapsed);\n      this.next(nextPos);\n\n      if (this.options.life < 0 || nextPos.y > demo.canvas.height + 50 || nextPos.x < -50 || nextPos.y < -50 || nextPos.x > demo.canvas.width + 50) {\n        this.reset();\n      }\n    }\n\n    onMouseMoveHandler(event) {\n      var rect = this.canvas.getBoundingClientRect();\n      var scale = this.WIDTH / this.canvasTargetWidth;\n\n      this.sparkSource = vec2.fromValues((event.clientX - rect.left) * scale, (event.clientY - rect.top) * scale);\n    }\n\n    onTouchMoveHandler(event) {\n      event.preventDefault();\n\n      var rect = this.canvas.getBoundingClientRect();\n      var scale = WIDTH / this.state.canvasTargetWidth;\n\n      this.sparkSource = vec2.fromValues((event.touches[0].clientX - rect.left) * scale, (event.touches[0].clientY - rect.top) * scale);\n    }\n  }\n\n  return Embers;\n\n}));\n","export function ran(min, max) {\n  return Math.random() * (max - min) + min;\n};\n\nexport function ranItem(arr) {\n  return arr[Math.floor(ran(0, arr.length - 0.000001))];\n};\n\nexport const Sides = {\n  LEFT: 1,\n  TOP: 2,\n  RIGHT: 3,\n  BOTTOM: 4,\n  ran: function() {\n    return Math.floor(ran(1, 4.99));\n  }\n};\n\nexport function isAbove(p1, p2) {\n  return p1.y < p2.y;\n}\nexport function isBelow(p1, p2) {\n  return p1.y > p2.y;\n}\nexport function isLeft(p1, p2) {\n  return p1.x < p2.x;\n}\nexport function isRight(p1, p2) {\n  return p1.x > p2.x;\n}\nexport function reverseOf(dir) {\n  return (((dir - 1) + 2) % 4) + 1;\n} // Opposite of LEFT (1) is RIGHT (3) etc.\nexport function toward(p1, p2) {\n  var dir = [];\n  if (isAbove(p1, p2)) dir.push(4);\n  if (isBelow(p1, p2)) dir.push(2);\n  if (isLeft(p1, p2)) dir.push(3);\n  if (isRight(p1, p2)) dir.push(1);\n  return dir;\n}\n\nexport function vecFor(side) {\n  if (side == Sides.LEFT) return new paper.Point(-1, 0);\n  if (side == Sides.RIGHT) return new paper.Point(1, 0);\n  if (side == Sides.TOP) return new paper.Point(0, -1);\n  if (side == Sides.BOTTOM) return new paper.Point(0, 1);\n}\n\nexport function getRandomPointFor(side, bounds) {\n  let x = 0;\n  x = side == Sides.RIGHT ? bounds.right : x;\n  x = side == Sides.TOP || side == Sides.BOTTOM ? ran(0, bounds.right) : x;\n\n  let y = 0;\n  y = side == Sides.BOTTOM ? bounds.bottom : y;\n  y = side == Sides.LEFT || side == Sides.RIGHT ? ran(0, bounds.bottom) : y;\n\n  return new paper.Point(x, y);\n}\n\nexport function hsvToRgb(h, s, v) {\n  var i;\n  var f;\n  var p;\n  var q;\n  var t;\n  var r;\n  var g;\n  var b;\n  if (s == 0) {\n    // achromatic (grey)\n    r = g = b = v;\n  } else {\n    h /= 60; // sector 0 to 5\n    i = Math.floor(h);\n    f = h - i; // factorial part of h\n    p = v * (1 - s);\n    q = v * (1 - s * f);\n    t = v * (1 - s * (1 - f));\n    switch (i) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n      default:\n        r = v;\n        g = p;\n        b = q;\n        break;\n    }\n  }\n\n  return {\n    r: r,\n    g: g,\n    b: b\n  };\n}\n\nexport default {\n  ran: ran,\n  ranItem: ranItem,\n  Sides: Sides,\n  isAbove: isAbove,\n  isBelow: isBelow,\n  isLeft: isLeft,\n  isRight: isRight,\n  reverseOf: reverseOf,\n  toward: toward,\n  vecFor: vecFor,\n  hsvToRgb: hsvToRgb,\n  getRandomPointFor: getRandomPointFor\n};\n","/*============================================\n * A spark represents a sequence of shapes that\n * move along a provided path.\n *============================================*/\n\nclass Spark {\n\n  reset() {\n    this.sparking = false;\n  }\n\n  spark(options) {\n    if (this.sparking) {\n      return;\n    }\n\n    // Merge with current options\n    for (var a in options) {\n      this.options[a] = options[a];\n    }\n\n    // TODO do not duplicate variable names, reference via 'this.options.blah'\n    this.onFrameCallback = options.onFrameCallback;\n    this.velocity = options.velocity;\n\n    this.sparking = true;\n    this.position = this.options.position;\n\n    this.points = this.options.position ? [this.options.position] : undefined; // Reset points for manual mode\n  }\n\n  // Manual mode, set the next position of the spark\n  next(pos) {\n    this.position = pos;\n\n    this.points = this.points || [];\n    this.points.push(pos);\n\n    if (this.points.length > this.sparkResolution) {\n      this.points.shift();\n    }\n  }\n\n  onFrame(elapsed, context) {\n    if (this.sparking) {\n      if (this.onFrameCallback) {\n        this.onFrameCallback.call(this, elapsed, context);\n      }\n\n      this.updateTail(elapsed, context);\n    }\n  }\n\n  updateTail(elapsed, context) {\n    // Go backwards from the end, building up paths and letting the dev manually style them\n    // ensuring that there are this.resolution # of paths.\n    if (this.points.length > 1) {\n      for (var i = 0; i < this.points.length - 1; i++) {\n        var start = this.points[this.points.length - (i + 1)];\n        var end = this.points[this.points.length - (i + 2)];\n\n        // Let dev manually style points based on ratio of start to end\n        this.pathRedraw(this, start, end, i / (this.sparkResolution - 1), elapsed, context);\n      }\n    }\n  }\n\n  // Spark()\n  constructor(options) {\n    this.id = options.id || -1; // index of this spark\n    this.pathRedraw = options.pathRedraw; // A function to call to redraw each segment as the spark moves.\n\n    this.sparkLength = options.sparkLength || 200; // Pixel length of the spark\n    this.sparkResolution = options.sparkResolution || 20; // Resolution (number of segments) of the spark\n\n    this.options = options;\n\n    this.paths = []; // Paper.js Paths of this spark, one for each segment.\n\n    this.sparking = false;\n  }\n}\n\nexport default Spark;\n","import Spark from './gx/Spark.js';\n\nclass Lib {\n  constructor() {\n    this.Spark = Spark;\n  }\n}\n\nexport default new Lib();\n","const DEFAULT_WIDTH = 800;\nconst DEFAULT_HEIGHT = 800 / 1.618;\n\nclass ComponentBase {\n  constructor(canvas, options, id) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n\n    this.options = options || {};\n\n    this.lastTime = 0;\n\n    this.canvasTargetWidth = this.width = this.options.width || DEFAULT_WIDTH;\n    this.canvasTargetHeight = this.height = this.options.width || DEFAULT_HEIGHT;\n\n    window.addEventListener('resize', this.resizeHandler.bind(this));\n\n    canvas.addEventListener('mousemove', this.onMouseMoveHandler.bind(this));\n    canvas.addEventListener('mouseout', this.onMouseOutHandler.bind(this));\n    canvas.addEventListener('touchstart', this.onTouchStartHandler.bind(this));\n    canvas.addEventListener('touchmove', this.onTouchMoveHandler.bind(this));\n\n    canvas.setAttribute('width', DEFAULT_WIDTH);\n    canvas.setAttribute('height', DEFAULT_HEIGHT);\n\n    if (id) {\n      canvas.setAttribute('id', id);\n    }\n\n    window.requestAnimationFrame(this.onFrameFirst.bind(this));\n  }\n\n  resizeHandler(event) {\n    var i = Math.min(800, window.innerWidth);\n\n    canvas.style.width = this.canvasTargetWidth = i;\n    canvas.style.height = this.canvasTargetHeight = i / 1.618;\n\n    this.resize();\n  }\n\n  resize() {\n    console.log('Resized!', this.canvasTargetWidth, this.canvasTargetHeight);\n  }\n\n  onMouseMoveHandler() {\n    // noop\n  }\n\n  onMouseOutHandler() {\n    // noop\n  }\n\n  onTouchStartHandler() {\n    // noop\n  }\n\n  onTouchMoveHandler() {\n    // noop\n  }\n\n  onFrameFirst(timestamp) {\n    this.lastTime = timestamp;\n    window.requestAnimationFrame(this.onFrame.bind(this));\n  }\n\n  onFrameHandler(timestamp) {\n    if (!this.lastTime) {\n      this.lastTime = timestamp;\n      this.elapsed = 0.01;\n    } else {\n      this.elapsed = (timestamp - this.lastTime) / 1000;\n    }\n  }\n}\n\nexport default ComponentBase;\n","import Lib from '../lib/Lib.js';\nimport ComponentBase from '../lib/core/ComponentBase.js';\nimport Spark from '../lib/gx/Spark.js';\nimport util from '../lib/util/util.js';\n\n/*============================================\n * Constants\n *============================================*/\nconst SPARK_COUNT = 500;              // Maximum number of sparks to display simultaneously\nconst SPARK_MAX_SIZE = 1.5;\nconst SPARK_MIN_SIZE = 0.5;\nconst SPARK_MAX_VELOCITY = 70;\nconst SPARK_MIN_VELOCITY = 20;\nconst SPARK_SOURCE_RADIUS = 50;       // Spark source radius in pixels\nconst CHANGE_DIR_TIME_MAX = 5000;     // The maximum time to wait between changing directions\n\n/*============================================\n * The demo JSX component\n *============================================*/\nclass Embers extends ComponentBase {\n  constructor(canvas, options) {\n    super(canvas, options);\n\n    this.options.sparkCount = this.options.sparkCount || SPARK_COUNT;\n    this.options.maxSparkSize = this.options.maxSparkSize || SPARK_MAX_SIZE;\n    this.options.minSparkSize = this.options.minSparkSize || SPARK_MIN_SIZE;\n    this.options.maxSparkVelocity = this.options.maxSparkVelocity || SPARK_MAX_VELOCITY;\n    this.options.minSparkVelocity = this.options.minSparkVelocity || SPARK_MIN_VELOCITY;\n    this.options.sparkCount = this.options.sparkCount || SPARK_COUNT;\n\n    this.sparkSource = new vec2.fromValues(this.width / 2, this.height / 5);\n\n    this.sparks = [];\n\n    for (var i = 0; i < this.options.sparkCount; i++) {\n      this.sparks.push(new Spark({\n        pathRedraw: this.pathRedraw,\n        sparkResolution: 4\n      }));\n    }\n  }\n\n  pathRedraw(spark, start, end, ratio, elapsed, context) {\n    ratio = 1 - ratio;\n\n    var rgb = util.hsvToRgb(spark.options.color.h, spark.options.color.s, spark.options.color.l);\n\n    context.strokeStyle = 'rgba(' + ~~(rgb.r * 256) + ',' + ~~(rgb.g * 256) + ',' + ~~(rgb.b) * 256 + ',' + ratio + ')';\n    context.lineWidth = spark.options.size * ratio;\n\n    context.beginPath();\n    context.moveTo(start[0], start[1]);\n    context.lineTo(end[0], end[1]);\n    context.stroke();\n  }\n\n  onFrame(timestamp) {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.elapsed = (timestamp - this.lastTime) / 1000;\n    this.lastTime = timestamp;\n\n    this.sparks.forEach(spark => {\n      if (!spark.sparking) {\n        this.startSpark(spark);\n      }\n\n      this.sparkOnFrame.call(spark, this);\n\n      spark.onFrame(this.elapsed, this.ctx);\n    });\n\n    window.requestAnimationFrame(this.onFrame.bind(this));\n  }\n\n  startSpark(spark) {\n    var velAngle = Math.random() - .5 - (Math.PI / 2);\n    var sourceAngle = Math.random() * Math.PI * 2;\n    var sourceDistance = Math.random() * SPARK_SOURCE_RADIUS;\n    var life = Math.random() * 8;\n\n    spark.spark({\n      type: 2,\n      size: (Math.random() * (this.options.maxSparkSize - this.options.minSparkSize)) + this.options.minSparkSize,\n      color: {\n        h: Math.random() * 28 + 20,\n        s: Math.random() * 0.4 + 0.6,\n        l: 1\n      },\n      position: vec2.add(vec2.create(), this.sparkSource, vec2.fromValues(Math.cos(sourceAngle) * sourceDistance, Math.sin(sourceAngle) * sourceDistance)),\n      velocity: vec2.scale(vec2.create(), vec2.fromValues(Math.cos(velAngle), Math.sin(velAngle)), Math.random() * (this.options.maxSparkVelocity - this.options.minSparkVelocity) + this.options.minSparkVelocity),\n      heatCurrent: 0,\n      lastAngleChangeTime: 0,\n      glow: Math.random() * 0.6 + 0.2,\n      flickerSpeed: Math.random(),\n      life: life,\n      lifeTotal: 8\n    });\n  }\n\n  // 'this' will be the Spark object itself.\n  sparkOnFrame(demo) {\n    var ran = (Math.random() * CHANGE_DIR_TIME_MAX) + (demo.lastTime - this.options.lastAngleChangeTime);\n\n    if (ran > CHANGE_DIR_TIME_MAX) {\n      var angle = (Math.random() * (3.141 / 3)) - (3.141 / 6);\n      var matrix = mat2.create();\n      mat2.rotate(matrix, matrix, angle);\n      vec2.transformMat2(this.options.velocity, this.options.velocity, matrix);\n      this.options.lastAngleChangeTime = demo.lastTime;\n    }\n\n    this.options.heatCurrent += (Math.random());\n    this.options.life -= demo.elapsed;\n    this.options.color.l = (this.options.life / this.options.lifeTotal) * this.options.glow;\n\n    var nextPos = vec2.scaleAndAdd(vec2.create(), this.position, this.options.velocity, demo.elapsed);\n    this.next(nextPos);\n\n    if (this.options.life < 0 || nextPos.y > demo.canvas.height + 50 || nextPos.x < -50 || nextPos.y < -50 || nextPos.x > demo.canvas.width + 50) {\n      this.reset();\n    }\n  }\n\n  onMouseMoveHandler(event) {\n    var rect = this.canvas.getBoundingClientRect();\n    var scale = this.WIDTH / this.canvasTargetWidth;\n\n    this.sparkSource = vec2.fromValues((event.clientX - rect.left) * scale, (event.clientY - rect.top) * scale);\n  }\n\n  onTouchMoveHandler(event) {\n    event.preventDefault();\n\n    var rect = this.canvas.getBoundingClientRect();\n    var scale = WIDTH / this.state.canvasTargetWidth;\n\n    this.sparkSource = vec2.fromValues((event.touches[0].clientX - rect.left) * scale, (event.touches[0].clientY - rect.top) * scale);\n  }\n}\n\nexport default Embers;\n"],"sourceRoot":"/source/"}