{"version":3,"sources":["embers.min.js","/source/embers.js","/source/src/lib/gx/Spark.js","/source/src/lib/lib.js","/source/src/embers/embers.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","embers","this","Spark","options","id","pathRedraw","sparkLength","sparkResolution","paths","sparking","value","a","onFrameCallback","velocity","position","points","undefined","pos","push","shift","elapsed","context","call","updateTail","start","end","Lib","Embers","console","log"],"mappings":"AAEA,QAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,OCAjiB,SAAWkB,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,IAC9D,kBAAXG,SAAyBA,OAAOC,IAAMD,OAAOH,GACpDD,EAAOM,OAASL,KAChBM,KAAM,WAAc,YDUpB,IETIC,GAAA,WA+DO,QA/DPA,GA+DQC,GFkBR7B,gBAAgB2B,KEjFhBC,GAgEFD,KAAKG,GAAKD,EAAQC,IAAM,GACxBH,KAAKI,WAAaF,EAAQE,WAE1BJ,KAAKK,YAAcH,EAAQG,aAAe,IAC1CL,KAAKM,gBAAkBJ,EAAQI,iBAAmB,GAElDN,KAAKE,QAAUA,EAEfF,KAAKO,SAELP,KAAKQ,UAAW,EFsBhB,MAtFA/B,cEVEwB,IFWAZ,IAAK,QACLoB,MEVC,WACHT,KAAKQ,UAAW,KFadnB,IAAK,QACLoB,MEXC,SAACP,GACJ,IAAIF,KAAKQ,SAAT,CAKA,IAAK,GAAIE,KAAKR,GACZF,KAAKE,QAAQQ,GAAKR,EAAQQ,EAI5BV,MAAKW,gBAAkBT,EAAQS,gBAC/BX,KAAKY,SAAWV,EAAQU,SAExBZ,KAAKQ,UAAW,EAChBR,KAAKa,SAAWb,KAAKE,QAAQW,SAE7Bb,KAAKc,OAASd,KAAKE,QAAQW,UAAYb,KAAKE,QAAQW,UAAYE,WFgB9D1B,IAAK,OACLoB,MEbA,SAACO,GACHhB,KAAKa,SAAWG,EAEhBhB,KAAKc,OAASd,KAAKc,WACnBd,KAAKc,OAAOG,KAAKD,GAEbhB,KAAKc,OAAOhC,OAASkB,KAAKM,iBAC5BN,KAAKc,OAAOI,WFiBZ7B,IAAK,UACLoB,MEdG,SAACU,EAASC,GACXpB,KAAKQ,WACHR,KAAKW,iBACPX,KAAKW,gBAAgBU,KAAKrB,KAAMmB,EAASC,GAG3CpB,KAAKsB,WAAWH,EAASC,OFkBzB/B,IAAK,aACLoB,MEfM,SAACU,EAASC,GAGlB,GAAIpB,KAAKc,OAAOhC,OAAS,EACvB,IAAK,GAAID,GAAI,EAAGA,EAAImB,KAAKc,OAAOhC,OAAS,EAAGD,IAAK,CAC/C,GAAI0C,GAAQvB,KAAKc,OAAOd,KAAKc,OAAOhC,QAAUD,EAAI,IAC9C2C,EAAMxB,KAAKc,OAAOd,KAAKc,OAAOhC,QAAUD,EAAI,GAGhDmB,MAAKI,WAAWJ,KAAMuB,EAAOC,EAAK3C,GAAKmB,KAAKM,gBAAkB,GAAIa,EAASC,QAzD7EnB,KCHAwB,EACO,QADPA,KHuGFpD,gBAAgB2B,KGvGdyB,GAEFzB,KAAKC,MAAQA,GCFXyB,GDMS,GAAID,GCNb,WJ+GF,QI/GEC,KJgHArD,gBAAgB2B,KIhHhB0B,GJ0HF,MAPAjD,cInHEiD,IJoHArC,IAAK,cACLoB,MIpHO,WACTkB,QAAQC,IAAI,yBAFVF,MAFN3B,EAAA2B,CHyGE,OAAO3B","file":"embers.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.embers = factory()\n}(this, function () { 'use strict';\n\n  /*============================================\n   * A spark represents a sequence of shapes that\n   * move along a provided path.\n   *============================================*/\n\n  class Spark {\n\n    reset() {\n      this.sparking = false;\n    }\n\n    spark(options) {\n      if (this.sparking) {\n        return;\n      }\n\n      // Merge with current options\n      for (var a in options) {\n        this.options[a] = options[a];\n      }\n\n      // TODO do not duplicate variable names, reference via 'this.options.blah'\n      this.onFrameCallback = options.onFrameCallback;\n      this.velocity = options.velocity;\n\n      this.sparking = true;\n      this.position = this.options.position;\n\n      this.points = this.options.position ? [this.options.position] : undefined; // Reset points for manual mode\n    }\n\n    // Manual mode, set the next position of the spark\n    next(pos) {\n      this.position = pos;\n\n      this.points = this.points || [];\n      this.points.push(pos);\n\n      if (this.points.length > this.sparkResolution) {\n        this.points.shift();\n      }\n    }\n\n    onFrame(elapsed, context) {\n      if (this.sparking) {\n        if (this.onFrameCallback) {\n          this.onFrameCallback.call(this, elapsed, context);\n        }\n\n        this.updateTail(elapsed, context);\n      }\n    }\n\n    updateTail(elapsed, context) {\n      // Go backwards from the end, building up paths and letting the dev manually style them\n      // ensuring that there are this.resolution # of paths.\n      if (this.points.length > 1) {\n        for (var i = 0; i < this.points.length - 1; i++) {\n          var start = this.points[this.points.length - (i + 1)];\n          var end = this.points[this.points.length - (i + 2)];\n\n          // Let dev manually style points based on ratio of start to end\n          this.pathRedraw(this, start, end, i / (this.sparkResolution - 1), elapsed, context);\n        }\n      }\n    }\n\n    // Spark()\n    constructor(options) {\n      this.id = options.id || -1; // index of this spark\n      this.pathRedraw = options.pathRedraw; // A function to call to redraw each segment as the spark moves.\n\n      this.sparkLength = options.sparkLength || 200; // Pixel length of the spark\n      this.sparkResolution = options.sparkResolution || 20; // Resolution (number of segments) of the spark\n\n      this.options = options;\n\n      this.paths = []; // Paper.js Paths of this spark, one for each segment.\n\n      this.sparking = false;\n    }\n  }\n\n  class Lib {\n    constructor() {\n      this.Spark = Spark;\n    }\n  }\n\n  var lib_js = new Lib();\n\n  class Embers {\n    doSomething() {\n      console.log('something is done');\n    }\n  }\n\n  var embers = Embers;\n\n  return embers;\n\n}));\n","/*============================================\n * A spark represents a sequence of shapes that\n * move along a provided path.\n *============================================*/\n\nclass Spark {\n\n  reset() {\n    this.sparking = false;\n  }\n\n  spark(options) {\n    if (this.sparking) {\n      return;\n    }\n\n    // Merge with current options\n    for (var a in options) {\n      this.options[a] = options[a];\n    }\n\n    // TODO do not duplicate variable names, reference via 'this.options.blah'\n    this.onFrameCallback = options.onFrameCallback;\n    this.velocity = options.velocity;\n\n    this.sparking = true;\n    this.position = this.options.position;\n\n    this.points = this.options.position ? [this.options.position] : undefined; // Reset points for manual mode\n  }\n\n  // Manual mode, set the next position of the spark\n  next(pos) {\n    this.position = pos;\n\n    this.points = this.points || [];\n    this.points.push(pos);\n\n    if (this.points.length > this.sparkResolution) {\n      this.points.shift();\n    }\n  }\n\n  onFrame(elapsed, context) {\n    if (this.sparking) {\n      if (this.onFrameCallback) {\n        this.onFrameCallback.call(this, elapsed, context);\n      }\n\n      this.updateTail(elapsed, context);\n    }\n  }\n\n  updateTail(elapsed, context) {\n    // Go backwards from the end, building up paths and letting the dev manually style them\n    // ensuring that there are this.resolution # of paths.\n    if (this.points.length > 1) {\n      for (var i = 0; i < this.points.length - 1; i++) {\n        var start = this.points[this.points.length - (i + 1)];\n        var end = this.points[this.points.length - (i + 2)];\n\n        // Let dev manually style points based on ratio of start to end\n        this.pathRedraw(this, start, end, i / (this.sparkResolution - 1), elapsed, context);\n      }\n    }\n  }\n\n  // Spark()\n  constructor(options) {\n    this.id = options.id || -1; // index of this spark\n    this.pathRedraw = options.pathRedraw; // A function to call to redraw each segment as the spark moves.\n\n    this.sparkLength = options.sparkLength || 200; // Pixel length of the spark\n    this.sparkResolution = options.sparkResolution || 20; // Resolution (number of segments) of the spark\n\n    this.options = options;\n\n    this.paths = []; // Paper.js Paths of this spark, one for each segment.\n\n    this.sparking = false;\n  }\n}\n\nexport default Spark;\n","import Spark from './gx/Spark.js';\n\nclass Lib {\n  constructor() {\n    this.Spark = Spark;\n  }\n}\n\nexport default new Lib();\n","import Lib from '../lib/lib.js';\n\nclass Embers {\n  doSomething() {\n    console.log('something is done');\n  }\n}\n\nexport default Embers;\n"],"sourceRoot":"/source/"}