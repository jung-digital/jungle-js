{"version":3,"sources":["Lib.min.js","/source/Lib.js","/source/src/lib/gx/Spark.js","/source/src/lib/Lib.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","Lib","this","Spark","options","id","pathRedraw","sparkResolution","paths","sparking","value","a","onFrameCallback","velocity","position","points","undefined","pos","push","shift","elapsed","context","call","updateTail","start","end","lib_Lib"],"mappings":"AAEA,QAASA,iBAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAFhH,GAAIC,cAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,OCAjiB,SAAWkB,EAAQC,GACE,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,IAC9D,kBAAXG,SAAyBA,OAAOC,IAAMD,OAAOH,GACpDD,EAAOM,IAAML,KACbM,KAAM,WAAc,YDUpB,IETIC,GAAA,WA+DO,QA/DPA,GA+DQC,GFkBR7B,gBAAgB2B,KEjFhBC,GAgEFD,KAAKG,GAAKD,EAAQC,IAAM,GACxBH,KAAKI,WAAaF,EAAQE,WAE1BJ,KAAKK,gBAAkBH,EAAQG,iBAAmB,GAElDL,KAAKE,QAAUA,EAEfF,KAAKM,SAELN,KAAKO,UAAW,EFsBhB,MArFA9B,cEVEwB,IFWAZ,IAAK,QACLmB,MEVC,WACHR,KAAKO,UAAW,KFadlB,IAAK,QACLmB,MEXC,SAACN,GACJ,IAAIF,KAAKO,SAAT,CAKA,IAAK,GAAIE,KAAKP,GACZF,KAAKE,QAAQO,GAAKP,EAAQO,EAI5BT,MAAKU,gBAAkBR,EAAQQ,gBAC/BV,KAAKW,SAAWT,EAAQS,SAExBX,KAAKO,UAAW,EAChBP,KAAKY,SAAWZ,KAAKE,QAAQU,SAE7BZ,KAAKa,OAASb,KAAKE,QAAQU,UAAYZ,KAAKE,QAAQU,UAAYE,WFgB9DzB,IAAK,OACLmB,MEbA,SAACO,GACHf,KAAKY,SAAWG,EAEhBf,KAAKa,OAASb,KAAKa,WACnBb,KAAKa,OAAOG,KAAKD,GAEbf,KAAKa,OAAO/B,OAASkB,KAAKK,iBAC5BL,KAAKa,OAAOI,WFiBZ5B,IAAK,UACLmB,MEdG,SAACU,EAASC,GACXnB,KAAKO,WACHP,KAAKU,iBACPV,KAAKU,gBAAgBU,KAAKpB,KAAMkB,EAASC,GAG3CnB,KAAKqB,WAAWH,EAASC,OFkBzB9B,IAAK,aACLmB,MEfM,SAACU,EAASC,GAGlB,GAAInB,KAAKa,OAAO/B,OAAS,EACvB,IAAK,GAAID,GAAI,EAAGA,EAAImB,KAAKa,OAAO/B,OAAS,EAAGD,IAAK,CAC/C,GAAIyC,GAAQtB,KAAKa,OAAOb,KAAKa,OAAO/B,QAAUD,EAAI,IAC9C0C,EAAMvB,KAAKa,OAAOb,KAAKa,OAAO/B,QAAUD,EAAI,GAGhDmB,MAAKI,WAAWJ,KAAMsB,EAAOC,EAAK1C,GAAKmB,KAAKK,gBAAkB,GAAIa,EAASC,QAzD7ElB,KCHAF,EACO,QADPA,KHsGF1B,gBAAgB2B,KGtGdD,GAEFC,KAAKC,MAAQA,GAJjBuB,EAQe,GAAIzB,EFwFjB,OAAOyB","file":"Lib.min.js","sourcesContent":[null,"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.Lib = factory()\n}(this, function () { 'use strict';\n\n  /*============================================\n   * A spark represents a sequence of shapes that\n   * move along a provided path.\n   *============================================*/\n\n  class Spark {\n\n    reset() {\n      this.sparking = false;\n    }\n\n    spark(options) {\n      if (this.sparking) {\n        return;\n      }\n\n      // Merge with current options\n      for (var a in options) {\n        this.options[a] = options[a];\n      }\n\n      // TODO do not duplicate variable names, reference via 'this.options.blah'\n      this.onFrameCallback = options.onFrameCallback;\n      this.velocity = options.velocity;\n\n      this.sparking = true;\n      this.position = this.options.position;\n\n      this.points = this.options.position ? [this.options.position] : undefined; // Reset points for manual mode\n    }\n\n    // Manual mode, set the next position of the spark\n    next(pos) {\n      this.position = pos;\n\n      this.points = this.points || [];\n      this.points.push(pos);\n\n      if (this.points.length > this.sparkResolution) {\n        this.points.shift();\n      }\n    }\n\n    onFrame(elapsed, context) {\n      if (this.sparking) {\n        if (this.onFrameCallback) {\n          this.onFrameCallback.call(this, elapsed, context);\n        }\n\n        this.updateTail(elapsed, context);\n      }\n    }\n\n    updateTail(elapsed, context) {\n      // Go backwards from the end, building up paths and letting the dev manually style them\n      // ensuring that there are this.resolution # of paths.\n      if (this.points.length > 1) {\n        for (var i = 0; i < this.points.length - 1; i++) {\n          var start = this.points[this.points.length - (i + 1)];\n          var end = this.points[this.points.length - (i + 2)];\n\n          // Let dev manually style points based on ratio of start to end\n          this.pathRedraw(this, start, end, i / (this.sparkResolution - 1), elapsed, context);\n        }\n      }\n    }\n\n    // Spark()\n    constructor(options) {\n      this.id = options.id || -1; // index of this spark\n      this.pathRedraw = options.pathRedraw; // A function to call to redraw each segment as the spark moves.\n\n      this.sparkResolution = options.sparkResolution || 20; // Resolution (number of segments) of the spark\n\n      this.options = options;\n\n      this.paths = []; // Paper.js Paths of this spark, one for each segment.\n\n      this.sparking = false;\n    }\n  }\n\n  class Lib {\n    constructor() {\n      this.Spark = Spark;\n    }\n  }\n\n  var lib_Lib = new Lib();\n\n  return lib_Lib;\n\n}));\n","/*============================================\n * A spark represents a sequence of shapes that\n * move along a provided path.\n *============================================*/\n\nclass Spark {\n\n  reset() {\n    this.sparking = false;\n  }\n\n  spark(options) {\n    if (this.sparking) {\n      return;\n    }\n\n    // Merge with current options\n    for (var a in options) {\n      this.options[a] = options[a];\n    }\n\n    // TODO do not duplicate variable names, reference via 'this.options.blah'\n    this.onFrameCallback = options.onFrameCallback;\n    this.velocity = options.velocity;\n\n    this.sparking = true;\n    this.position = this.options.position;\n\n    this.points = this.options.position ? [this.options.position] : undefined; // Reset points for manual mode\n  }\n\n  // Manual mode, set the next position of the spark\n  next(pos) {\n    this.position = pos;\n\n    this.points = this.points || [];\n    this.points.push(pos);\n\n    if (this.points.length > this.sparkResolution) {\n      this.points.shift();\n    }\n  }\n\n  onFrame(elapsed, context) {\n    if (this.sparking) {\n      if (this.onFrameCallback) {\n        this.onFrameCallback.call(this, elapsed, context);\n      }\n\n      this.updateTail(elapsed, context);\n    }\n  }\n\n  updateTail(elapsed, context) {\n    // Go backwards from the end, building up paths and letting the dev manually style them\n    // ensuring that there are this.resolution # of paths.\n    if (this.points.length > 1) {\n      for (var i = 0; i < this.points.length - 1; i++) {\n        var start = this.points[this.points.length - (i + 1)];\n        var end = this.points[this.points.length - (i + 2)];\n\n        // Let dev manually style points based on ratio of start to end\n        this.pathRedraw(this, start, end, i / (this.sparkResolution - 1), elapsed, context);\n      }\n    }\n  }\n\n  // Spark()\n  constructor(options) {\n    this.id = options.id || -1; // index of this spark\n    this.pathRedraw = options.pathRedraw; // A function to call to redraw each segment as the spark moves.\n\n    this.sparkResolution = options.sparkResolution || 20; // Resolution (number of segments) of the spark\n\n    this.options = options;\n\n    this.paths = []; // Paper.js Paths of this spark, one for each segment.\n\n    this.sparking = false;\n  }\n}\n\nexport default Spark;\n","import Spark from './gx/Spark.js';\n\nclass Lib {\n  constructor() {\n    this.Spark = Spark;\n  }\n}\n\nexport default new Lib();\n"],"sourceRoot":"/source/"}